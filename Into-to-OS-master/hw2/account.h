#ifndef ACC_H_
#define ACC_H_
#include <pthread.h>
#include <unistd.h>
#include <string>
#include <iostream>

using namespace std;

class account
{
public:
	//constructor
	account(int num, int pass, int amount);

	//deconstruct
	~account();

	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	//description: deposit given amount into account
	//parameters: pass - password, amount - desposit amount, wait - true: wait if its an atm call through bank / false: dont wait if its an internal bank function
	//return: on success - new balance after deposit, on failure - throw's an error massage (string)
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	int deposit(int pass, int amount, bool wait);

	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	//description: withdraw given amount from account
	//parameters:  pass - password, amount - withdraw amount, wait - true: wait if its an atm call through bank / false: dont wait if its an internal bank function
	//return: on success - new balance after withdraw, on failure - throw's an error massage (string)
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	int withdraw(int pass, int amount, bool wait);

	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	//description: withdraw given percent from balance
	//parameters: percent - percent to withdraw from balance
	//return: new balance after commission
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	int commission(int percent);

	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	//description: gets balance
	//parameters: pass - password, wait - true: wait if its an atm call through bank / false: dont wait if its an internal bank function
	//return: on success - given account balance, on failure - throw's an error massage (string)
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	int get_balance(int pass, bool wait);

	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	//description: gets password
	//parameters: none
	//return: password of current account
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	int get_password();

	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	//description: mutex reader mechanism start - for account money access
	//parameters: none
	//return: none
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	void start_reader_crit_section();

	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	//description: mutex reader mechanism end - for account money access
	//parameters: none
	//return: none
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	void end_reader_crit_section();

protected:
	int m_num;
	int m_pass;
	int m_balance;

	//mutex read/write mechanism variables
	pthread_mutex_t m_read_mutex;
	pthread_mutex_t m_write_mutex;
	int m_count; //readers count
};

#endif