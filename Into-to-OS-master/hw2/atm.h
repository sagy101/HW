#ifndef ATM_H_
#define ATM_H_
#include "bank.h"



class atm
{
public:
	//constructor
	atm(int atm_num, bank* bank, ofstream& ofs, string file_name);

	//destructor
	~atm();

	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	//description: operate ATM - read input line and operate accordingly
	//parameters: none
	//return: none
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	void operate();

	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	//description: deposit into given account, prints deposit details into log
	//parameters: acc_num- account number, pass- account password, dep_amount - desposit amount
	//return: none
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	void deposit(int acc_num, int pass, int dep_amount);

	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	//description: creat account, with initial balance, prints account details into log
	//parameters: acc_num- account number, pass- account password, init_balance - initial balance
	//return: none
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	void creat_account(int acc_num, int pass, int init_balance);

	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	//description: withdraw from given account, prints withdrawal details into log
	//parameters: acc_num- account number, pass- account password, with_amount - withdrawal amount
	//return: none
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	void withdraw(int acc_num, int pass, int with_amount);

	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	//description: get balance from given account, prints balance details into log
	//parameters: acc_num- account number, pass- account password
	//return: none
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	void get_balance(int acc_num, int pass);

	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	//description: transfer between two given accounts, prints transfer details into log
	//parameters: acc_num- account number, acc_pass- account password, target_acc_num - tranfer's target account number, amount - transfer amount
	//return: none
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	void transfer(int acc_num, int pass,  int target_acc_num, int amount);

	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	//description: print error function - utility function that prints error
	//parameters: none
	//return: none
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	void print_error(string exp);

	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	//description: operate thread utility function
	//parameters: operate - pointer to operate
	//return: none
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	static void* operate_helper(void* operate) {
		((atm*)operate)->operate();
		pthread_exit(NULL);
	};
	
protected:
	int m_atm_num;
	bank* m_bank; //pointer to the bank
	ofstream& m_ofs;//output log file
	string m_input_file_name;
	ifstream m_input_file_stream;
};

#endif